input ChangePasswordInput {
  oldPassword: String!
  # user new password
  password: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  error: String
  me: User
  clientMutationId: String
}

input DeletePersonInput {
  _id: String!
  clientMutationId: String
}

type DeletePersonPayload {
  message: String
  clientMutationId: String
}

input DeletePetInput {
  _id: String!
  clientMutationId: String
}

type DeletePetPayload {
  message: String
  clientMutationId: String
}

input LoginEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

type Mutation {
  LoginEmail(input: LoginEmailInput!): LoginEmailPayload
  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload
  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload
  RegisterPerson(input: RegisterPersonInput!): RegisterPersonPayload
  RegisterPet(input: RegisterPetInput!): RegisterPetPayload
  DeletePerson(input: DeletePersonInput!): DeletePersonPayload
  DeletePet(input: DeletePetInput!): DeletePetPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Person data
type Person {
  # The ID of an object
  id: ID!
  _id: String
  name: String
  telephone: String
  email: String
  address: String
  pets: ID
}

# Pet data
type PetType {
  # The ID of an object
  id: ID!
  _id: String
  name: String
  species: String
}

# The root of all... queries
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  me: User
  user(id: ID!): User
  users(
    after: String
    first: Int
    before: String
    last: Int
    search: String
  ): UserConnection
  persons(name: String, email: String): [Person]
  allPersons: [Person]
  pet(name: String, species: String): [PetType]
}

input RegisterEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input RegisterPersonInput {
  _id: String
  name: String!
  telephone: String
  email: String
  address: String
  pets: ID
  clientMutationId: String
}

type RegisterPersonPayload {
  newPerson: Person
  error: String
  clientMutationId: String
}

input RegisterPetInput {
  _id: String
  name: String!
  species: String
  clientMutationId: String
}

type RegisterPetPayload {
  newPet: PetType
  error: String
  clientMutationId: String
}

# User data
type User implements Node {
  # The ID of an object
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [UserEdge]
  count: Int
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User
  # A cursor for use in pagination
  cursor: String!
}
